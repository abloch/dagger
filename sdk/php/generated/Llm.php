<?php

/**
 * This class has been generated by dagger-php-sdk. DO NOT EDIT.
 */

declare(strict_types=1);

namespace Dagger;

class Llm extends Client\AbstractObject implements Client\IdAble
{
    /**
     * Retrieve the llm state as a CacheVolume
     */
    public function CacheVolume(): CacheVolume
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('CacheVolume');
        return new \Dagger\CacheVolume($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a Container
     */
    public function Container(): Container
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('Container');
        return new \Dagger\Container($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a CurrentModule
     */
    public function CurrentModule(): CurrentModule
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('CurrentModule');
        return new \Dagger\CurrentModule($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a Directory
     */
    public function Directory(): Directory
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('Directory');
        return new \Dagger\Directory($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a EnumTypeDef
     */
    public function EnumTypeDef(): EnumTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('EnumTypeDef');
        return new \Dagger\EnumTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a EnumValueTypeDef
     */
    public function EnumValueTypeDef(): EnumValueTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('EnumValueTypeDef');
        return new \Dagger\EnumValueTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a Error
     */
    public function Error(): Error
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('Error');
        return new \Dagger\Error($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a FieldTypeDef
     */
    public function FieldTypeDef(): FieldTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('FieldTypeDef');
        return new \Dagger\FieldTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a File
     */
    public function File(): File
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('File');
        return new \Dagger\File($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a Function
     */
    public function Function(): Function_
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('Function');
        return new \Dagger\Function_($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a FunctionArg
     */
    public function FunctionArg(): FunctionArg
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('FunctionArg');
        return new \Dagger\FunctionArg($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a FunctionCall
     */
    public function FunctionCall(): FunctionCall
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('FunctionCall');
        return new \Dagger\FunctionCall($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a FunctionCallArgValue
     */
    public function FunctionCallArgValue(): FunctionCallArgValue
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('FunctionCallArgValue');
        return new \Dagger\FunctionCallArgValue($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a GeneratedCode
     */
    public function GeneratedCode(): GeneratedCode
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('GeneratedCode');
        return new \Dagger\GeneratedCode($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a GitModuleSource
     */
    public function GitModuleSource(): GitModuleSource
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('GitModuleSource');
        return new \Dagger\GitModuleSource($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a GitRef
     */
    public function GitRef(): GitRef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('GitRef');
        return new \Dagger\GitRef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a GitRepository
     */
    public function GitRepository(): GitRepository
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('GitRepository');
        return new \Dagger\GitRepository($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a InputTypeDef
     */
    public function InputTypeDef(): InputTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('InputTypeDef');
        return new \Dagger\InputTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a InterfaceTypeDef
     */
    public function InterfaceTypeDef(): InterfaceTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('InterfaceTypeDef');
        return new \Dagger\InterfaceTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a ListTypeDef
     */
    public function ListTypeDef(): ListTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('ListTypeDef');
        return new \Dagger\ListTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a LocalModuleSource
     */
    public function LocalModuleSource(): LocalModuleSource
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('LocalModuleSource');
        return new \Dagger\LocalModuleSource($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a Module
     */
    public function Module(): Module
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('Module');
        return new \Dagger\Module($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a ModuleDependency
     */
    public function ModuleDependency(): ModuleDependency
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('ModuleDependency');
        return new \Dagger\ModuleDependency($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a ModuleSource
     */
    public function ModuleSource(): ModuleSource
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('ModuleSource');
        return new \Dagger\ModuleSource($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a ModuleSourceView
     */
    public function ModuleSourceView(): ModuleSourceView
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('ModuleSourceView');
        return new \Dagger\ModuleSourceView($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a ObjectTypeDef
     */
    public function ObjectTypeDef(): ObjectTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('ObjectTypeDef');
        return new \Dagger\ObjectTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a SDKConfig
     */
    public function SDKConfig(): SDKConfig
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('SDKConfig');
        return new \Dagger\SDKConfig($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a ScalarTypeDef
     */
    public function ScalarTypeDef(): ScalarTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('ScalarTypeDef');
        return new \Dagger\ScalarTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a Secret
     */
    public function Secret(): Secret
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('Secret');
        return new \Dagger\Secret($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a Service
     */
    public function Service(): Service
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('Service');
        return new \Dagger\Service($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a Socket
     */
    public function Socket(): Socket
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('Socket');
        return new \Dagger\Socket($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a SourceMap
     */
    public function SourceMap(): SourceMap
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('SourceMap');
        return new \Dagger\SourceMap($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a Terminal
     */
    public function Terminal(): Terminal
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('Terminal');
        return new \Dagger\Terminal($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve the llm state as a TypeDef
     */
    public function TypeDef(): TypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('TypeDef');
        return new \Dagger\TypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * return the llm message history
     */
    public function history(): array
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('history');
        return (array)$this->queryLeaf($leafQueryBuilder, 'history');
    }

    /**
     * A unique identifier for this Llm.
     */
    public function id(): LlmId
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('id');
        return new \Dagger\LlmId((string)$this->queryLeaf($leafQueryBuilder, 'id'));
    }

    /**
     * return the last llm reply from the history
     */
    public function lastReply(): string
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('lastReply');
        return (string)$this->queryLeaf($leafQueryBuilder, 'lastReply');
    }

    /**
     * send the context to the LLM endpoint, process replies and tool calls; continue in a loop
     */
    public function loop(?int $maxLoops = null): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('loop');
        if (null !== $maxLoops) {
        $innerQueryBuilder->setArgument('maxLoops', $maxLoops);
        }
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * return the model used by the llm
     */
    public function model(): string
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('model');
        return (string)$this->queryLeaf($leafQueryBuilder, 'model');
    }

    /**
     * print documentation for available tools
     */
    public function tools(): string
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('tools');
        return (string)$this->queryLeaf($leafQueryBuilder, 'tools');
    }

    /**
     * Set the llm state to a CacheVolume
     */
    public function withCacheVolume(CacheVolumeId|CacheVolume $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withCacheVolume');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a Container
     */
    public function withContainer(ContainerId|Container $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withContainer');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a CurrentModule
     */
    public function withCurrentModule(CurrentModuleId|CurrentModule $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withCurrentModule');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a Directory
     */
    public function withDirectory(DirectoryId|Directory $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withDirectory');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a EnumTypeDef
     */
    public function withEnumTypeDef(EnumTypeDefId|EnumTypeDef $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withEnumTypeDef');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a EnumValueTypeDef
     */
    public function withEnumValueTypeDef(EnumValueTypeDefId|EnumValueTypeDef $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withEnumValueTypeDef');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a Error
     */
    public function withError(ErrorId|Error $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withError');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a FieldTypeDef
     */
    public function withFieldTypeDef(FieldTypeDefId|FieldTypeDef $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withFieldTypeDef');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a File
     */
    public function withFile(FileId|File $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withFile');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a Function
     */
    public function withFunction(FunctionId|Function_ $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withFunction');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a FunctionArg
     */
    public function withFunctionArg(FunctionArgId|FunctionArg $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withFunctionArg');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a FunctionCall
     */
    public function withFunctionCall(FunctionCallId|FunctionCall $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withFunctionCall');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a FunctionCallArgValue
     */
    public function withFunctionCallArgValue(FunctionCallArgValueId|FunctionCallArgValue $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withFunctionCallArgValue');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a GeneratedCode
     */
    public function withGeneratedCode(GeneratedCodeId|GeneratedCode $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withGeneratedCode');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a GitModuleSource
     */
    public function withGitModuleSource(GitModuleSourceId|GitModuleSource $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withGitModuleSource');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a GitRef
     */
    public function withGitRef(GitRefId|GitRef $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withGitRef');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a GitRepository
     */
    public function withGitRepository(GitRepositoryId|GitRepository $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withGitRepository');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a InputTypeDef
     */
    public function withInputTypeDef(InputTypeDefId|InputTypeDef $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withInputTypeDef');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a InterfaceTypeDef
     */
    public function withInterfaceTypeDef(InterfaceTypeDefId|InterfaceTypeDef $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withInterfaceTypeDef');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a ListTypeDef
     */
    public function withListTypeDef(ListTypeDefId|ListTypeDef $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withListTypeDef');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a LocalModuleSource
     */
    public function withLocalModuleSource(LocalModuleSourceId|LocalModuleSource $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withLocalModuleSource');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a Module
     */
    public function withModule(ModuleId|Module $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withModule');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a ModuleDependency
     */
    public function withModuleDependency(ModuleDependencyId|ModuleDependency $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withModuleDependency');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a ModuleSource
     */
    public function withModuleSource(ModuleSourceId|ModuleSource $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withModuleSource');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a ModuleSourceView
     */
    public function withModuleSourceView(ModuleSourceViewId|ModuleSourceView $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withModuleSourceView');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a ObjectTypeDef
     */
    public function withObjectTypeDef(ObjectTypeDefId|ObjectTypeDef $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withObjectTypeDef');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * append a prompt to the llm context
     */
    public function withPrompt(string $prompt): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withPrompt');
        $innerQueryBuilder->setArgument('prompt', $prompt);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * append the contents of a file to the llm context
     */
    public function withPromptFile(FileId|File $file): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withPromptFile');
        $innerQueryBuilder->setArgument('file', $file);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * set a variable for expansion in the prompt
     */
    public function withPromptVar(string $name, string $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withPromptVar');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a SDKConfig
     */
    public function withSDKConfig(SDKConfigId|SDKConfig $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withSDKConfig');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a ScalarTypeDef
     */
    public function withScalarTypeDef(ScalarTypeDefId|ScalarTypeDef $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withScalarTypeDef');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a Secret
     */
    public function withSecret(SecretId|Secret $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withSecret');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a Service
     */
    public function withService(ServiceId|Service $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withService');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a Socket
     */
    public function withSocket(SocketId|Socket $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withSocket');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a SourceMap
     */
    public function withSourceMap(SourceMapId|SourceMap $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withSourceMap');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a Terminal
     */
    public function withTerminal(TerminalId|Terminal $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withTerminal');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set the llm state to a TypeDef
     */
    public function withTypeDef(TypeDefId|TypeDef $value): Llm
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withTypeDef');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Llm($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }
}
