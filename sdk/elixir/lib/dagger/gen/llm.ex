# This file generated by `dagger_codegen`. Please DO NOT EDIT.
defmodule Dagger.Llm do
  @moduledoc "Dagger.Llm"

  alias Dagger.Core.Client
  alias Dagger.Core.QueryBuilder, as: QB

  @derive Dagger.ID
  @derive Dagger.Sync
  defstruct [:query_builder, :client]

  @type t() :: %__MODULE__{}

  @doc "Retrieve the llm state as a CacheVolume"
  @spec cache_volume(t()) :: Dagger.CacheVolume.t()
  def cache_volume(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("cacheVolume")

    %Dagger.CacheVolume{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a Container"
  @spec container(t()) :: Dagger.Container.t()
  def container(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("container")

    %Dagger.Container{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a CurrentModule"
  @spec current_module(t()) :: Dagger.CurrentModule.t()
  def current_module(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("currentModule")

    %Dagger.CurrentModule{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a Directory"
  @spec directory(t()) :: Dagger.Directory.t()
  def directory(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("directory")

    %Dagger.Directory{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a EnumTypeDef"
  @spec enum_type_def(t()) :: Dagger.EnumTypeDef.t()
  def enum_type_def(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("enumTypeDef")

    %Dagger.EnumTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a EnumValueTypeDef"
  @spec enum_value_type_def(t()) :: Dagger.EnumValueTypeDef.t()
  def enum_value_type_def(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("enumValueTypeDef")

    %Dagger.EnumValueTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a Error"
  @spec error(t()) :: Dagger.Error.t()
  def error(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("error")

    %Dagger.Error{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a ErrorValue"
  @spec error_value(t()) :: Dagger.ErrorValue.t()
  def error_value(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("errorValue")

    %Dagger.ErrorValue{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a FieldTypeDef"
  @spec field_type_def(t()) :: Dagger.FieldTypeDef.t()
  def field_type_def(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("fieldTypeDef")

    %Dagger.FieldTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a File"
  @spec file(t()) :: Dagger.File.t()
  def file(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("file")

    %Dagger.File{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a Function"
  @spec function(t()) :: Dagger.Function.t()
  def function(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("function")

    %Dagger.Function{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a FunctionArg"
  @spec function_arg(t()) :: Dagger.FunctionArg.t()
  def function_arg(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("functionArg")

    %Dagger.FunctionArg{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a FunctionCall"
  @spec function_call(t()) :: Dagger.FunctionCall.t()
  def function_call(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("functionCall")

    %Dagger.FunctionCall{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a FunctionCallArgValue"
  @spec function_call_arg_value(t()) :: Dagger.FunctionCallArgValue.t()
  def function_call_arg_value(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("functionCallArgValue")

    %Dagger.FunctionCallArgValue{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a GeneratedCode"
  @spec generated_code(t()) :: Dagger.GeneratedCode.t()
  def generated_code(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("generatedCode")

    %Dagger.GeneratedCode{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a GitRef"
  @spec git_ref(t()) :: Dagger.GitRef.t()
  def git_ref(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("gitRef")

    %Dagger.GitRef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a GitRepository"
  @spec git_repository(t()) :: Dagger.GitRepository.t()
  def git_repository(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("gitRepository")

    %Dagger.GitRepository{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "return the llm message history"
  @spec history(t()) :: {:ok, [String.t()]} | {:error, term()}
  def history(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("history")

    Client.execute(llm.client, query_builder)
  end

  @doc "A unique identifier for this Llm."
  @spec id(t()) :: {:ok, Dagger.LlmID.t()} | {:error, term()}
  def id(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("id")

    Client.execute(llm.client, query_builder)
  end

  @doc "Retrieve the llm state as a InputTypeDef"
  @spec input_type_def(t()) :: Dagger.InputTypeDef.t()
  def input_type_def(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("inputTypeDef")

    %Dagger.InputTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a InterfaceTypeDef"
  @spec interface_type_def(t()) :: Dagger.InterfaceTypeDef.t()
  def interface_type_def(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("interfaceTypeDef")

    %Dagger.InterfaceTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "return the last llm reply from the history"
  @spec last_reply(t()) :: {:ok, String.t()} | {:error, term()}
  def last_reply(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("lastReply")

    Client.execute(llm.client, query_builder)
  end

  @doc "Retrieve the llm state as a ListTypeDef"
  @spec list_type_def(t()) :: Dagger.ListTypeDef.t()
  def list_type_def(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("listTypeDef")

    %Dagger.ListTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use sync"
  @doc "synchronize LLM state"
  @spec loop(t()) :: Dagger.Llm.t()
  def loop(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("loop")

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "return the model used by the llm"
  @spec model(t()) :: {:ok, String.t()} | {:error, term()}
  def model(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("model")

    Client.execute(llm.client, query_builder)
  end

  @doc "Retrieve the llm state as a Module"
  @spec module(t()) :: Dagger.Module.t()
  def module(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("module")

    %Dagger.Module{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a ModuleConfigClient"
  @spec module_config_client(t()) :: Dagger.ModuleConfigClient.t()
  def module_config_client(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("moduleConfigClient")

    %Dagger.ModuleConfigClient{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a ModuleSource"
  @spec module_source(t()) :: Dagger.ModuleSource.t()
  def module_source(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("moduleSource")

    %Dagger.ModuleSource{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a ObjectTypeDef"
  @spec object_type_def(t()) :: Dagger.ObjectTypeDef.t()
  def object_type_def(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("objectTypeDef")

    %Dagger.ObjectTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a ScalarTypeDef"
  @spec scalar_type_def(t()) :: Dagger.ScalarTypeDef.t()
  def scalar_type_def(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("scalarTypeDef")

    %Dagger.ScalarTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a SDKConfig"
  @spec sdkconfig(t()) :: Dagger.SDKConfig.t() | nil
  def sdkconfig(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("sdkconfig")

    %Dagger.SDKConfig{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a Secret"
  @spec secret(t()) :: Dagger.Secret.t()
  def secret(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("secret")

    %Dagger.Secret{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a Service"
  @spec service(t()) :: Dagger.Service.t()
  def service(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("service")

    %Dagger.Service{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a Socket"
  @spec socket(t()) :: Dagger.Socket.t()
  def socket(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("socket")

    %Dagger.Socket{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve the llm state as a SourceMap"
  @spec source_map(t()) :: Dagger.SourceMap.t()
  def source_map(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("sourceMap")

    %Dagger.SourceMap{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "synchronize LLM state"
  @spec sync(t()) :: {:ok, Dagger.Llm.t()} | {:error, term()}
  def sync(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("sync")

    with {:ok, id} <- Client.execute(llm.client, query_builder) do
      {:ok,
       %Dagger.Llm{
         query_builder:
           QB.query()
           |> QB.select("loadLlmFromID")
           |> QB.put_arg("id", id),
         client: llm.client
       }}
    end
  end

  @doc "Retrieve the llm state as a Terminal"
  @spec terminal(t()) :: Dagger.Terminal.t()
  def terminal(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("terminal")

    %Dagger.Terminal{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "print documentation for available tools"
  @spec tools(t()) :: {:ok, String.t()} | {:error, term()}
  def tools(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("tools")

    Client.execute(llm.client, query_builder)
  end

  @doc "Retrieve the llm state as a TypeDef"
  @spec type_def(t()) :: Dagger.TypeDef.t()
  def type_def(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("typeDef")

    %Dagger.TypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a CacheVolume"
  @spec with_cache_volume(t(), Dagger.CacheVolume.t()) :: Dagger.Llm.t()
  def with_cache_volume(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withCacheVolume")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a Container"
  @spec with_container(t(), Dagger.Container.t()) :: Dagger.Llm.t()
  def with_container(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withContainer") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a CurrentModule"
  @spec with_current_module(t(), Dagger.CurrentModule.t()) :: Dagger.Llm.t()
  def with_current_module(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withCurrentModule")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a Directory"
  @spec with_directory(t(), Dagger.Directory.t()) :: Dagger.Llm.t()
  def with_directory(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withDirectory") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a EnumTypeDef"
  @spec with_enum_type_def(t(), Dagger.EnumTypeDef.t()) :: Dagger.Llm.t()
  def with_enum_type_def(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withEnumTypeDef")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a EnumValueTypeDef"
  @spec with_enum_value_type_def(t(), Dagger.EnumValueTypeDef.t()) :: Dagger.Llm.t()
  def with_enum_value_type_def(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withEnumValueTypeDef")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a Error"
  @spec with_error(t(), Dagger.Error.t()) :: Dagger.Llm.t()
  def with_error(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withError") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a ErrorValue"
  @spec with_error_value(t(), Dagger.ErrorValue.t()) :: Dagger.Llm.t()
  def with_error_value(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withErrorValue")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a FieldTypeDef"
  @spec with_field_type_def(t(), Dagger.FieldTypeDef.t()) :: Dagger.Llm.t()
  def with_field_type_def(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withFieldTypeDef")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a File"
  @spec with_file(t(), Dagger.File.t()) :: Dagger.Llm.t()
  def with_file(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withFile") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a Function"
  @spec with_function(t(), Dagger.Function.t()) :: Dagger.Llm.t()
  def with_function(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withFunction") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a FunctionArg"
  @spec with_function_arg(t(), Dagger.FunctionArg.t()) :: Dagger.Llm.t()
  def with_function_arg(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withFunctionArg")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a FunctionCall"
  @spec with_function_call(t(), Dagger.FunctionCall.t()) :: Dagger.Llm.t()
  def with_function_call(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withFunctionCall")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a FunctionCallArgValue"
  @spec with_function_call_arg_value(t(), Dagger.FunctionCallArgValue.t()) :: Dagger.Llm.t()
  def with_function_call_arg_value(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withFunctionCallArgValue")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a GeneratedCode"
  @spec with_generated_code(t(), Dagger.GeneratedCode.t()) :: Dagger.Llm.t()
  def with_generated_code(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withGeneratedCode")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a GitRef"
  @spec with_git_ref(t(), Dagger.GitRef.t()) :: Dagger.Llm.t()
  def with_git_ref(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withGitRef") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a GitRepository"
  @spec with_git_repository(t(), Dagger.GitRepository.t()) :: Dagger.Llm.t()
  def with_git_repository(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withGitRepository")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a InputTypeDef"
  @spec with_input_type_def(t(), Dagger.InputTypeDef.t()) :: Dagger.Llm.t()
  def with_input_type_def(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withInputTypeDef")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a InterfaceTypeDef"
  @spec with_interface_type_def(t(), Dagger.InterfaceTypeDef.t()) :: Dagger.Llm.t()
  def with_interface_type_def(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withInterfaceTypeDef")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a ListTypeDef"
  @spec with_list_type_def(t(), Dagger.ListTypeDef.t()) :: Dagger.Llm.t()
  def with_list_type_def(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withListTypeDef")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a Module"
  @spec with_module(t(), Dagger.Module.t()) :: Dagger.Llm.t()
  def with_module(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withModule") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a ModuleConfigClient"
  @spec with_module_config_client(t(), Dagger.ModuleConfigClient.t()) :: Dagger.Llm.t()
  def with_module_config_client(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withModuleConfigClient")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a ModuleSource"
  @spec with_module_source(t(), Dagger.ModuleSource.t()) :: Dagger.Llm.t()
  def with_module_source(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withModuleSource")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a ObjectTypeDef"
  @spec with_object_type_def(t(), Dagger.ObjectTypeDef.t()) :: Dagger.Llm.t()
  def with_object_type_def(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withObjectTypeDef")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "append a prompt to the llm context"
  @spec with_prompt(t(), String.t()) :: Dagger.Llm.t()
  def with_prompt(%__MODULE__{} = llm, prompt) do
    query_builder =
      llm.query_builder |> QB.select("withPrompt") |> QB.put_arg("prompt", prompt)

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "append the contents of a file to the llm context"
  @spec with_prompt_file(t(), Dagger.File.t()) :: Dagger.Llm.t()
  def with_prompt_file(%__MODULE__{} = llm, file) do
    query_builder =
      llm.query_builder |> QB.select("withPromptFile") |> QB.put_arg("file", Dagger.ID.id!(file))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "set a variable for expansion in the prompt"
  @spec with_prompt_var(t(), String.t(), String.t()) :: Dagger.Llm.t()
  def with_prompt_var(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withPromptVar")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", value)

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a SDKConfig"
  @spec with_sdk_config(t(), Dagger.SDKConfig.t()) :: Dagger.Llm.t()
  def with_sdk_config(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withSDKConfig") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a ScalarTypeDef"
  @spec with_scalar_type_def(t(), Dagger.ScalarTypeDef.t()) :: Dagger.Llm.t()
  def with_scalar_type_def(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withScalarTypeDef")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a Secret"
  @spec with_secret(t(), Dagger.Secret.t()) :: Dagger.Llm.t()
  def with_secret(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withSecret") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a Service"
  @spec with_service(t(), Dagger.Service.t()) :: Dagger.Llm.t()
  def with_service(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withService") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a Socket"
  @spec with_socket(t(), Dagger.Socket.t()) :: Dagger.Llm.t()
  def with_socket(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withSocket") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a SourceMap"
  @spec with_source_map(t(), Dagger.SourceMap.t()) :: Dagger.Llm.t()
  def with_source_map(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withSourceMap") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a Terminal"
  @spec with_terminal(t(), Dagger.Terminal.t()) :: Dagger.Llm.t()
  def with_terminal(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withTerminal") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set the llm state to a TypeDef"
  @spec with_type_def(t(), Dagger.TypeDef.t()) :: Dagger.Llm.t()
  def with_type_def(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withTypeDef") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Llm{
      query_builder: query_builder,
      client: llm.client
    }
  end
end

defimpl Jason.Encoder, for: Dagger.Llm do
  def encode(llm, opts) do
    {:ok, id} = Dagger.Llm.id(llm)
    Jason.Encode.string(id, opts)
  end
end

defimpl Nestru.Decoder, for: Dagger.Llm do
  def decode_fields_hint(_struct, _context, id) do
    {:ok, Dagger.Client.load_llm_from_id(Dagger.Global.dag(), id)}
  end
end
